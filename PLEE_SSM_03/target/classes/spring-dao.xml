<?xml version="1.0" encoding="UTF8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--1.关联数据库配置文件-->
<!--
    <context:property-placeholder location="classpath:database.properties"/>
-->

    <!--2.连接池-->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!--<property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>

        <property name="initialSize" value="${initialSize}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxWait" value="${maxWait}"/>-->

        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <!--<property name="url" value="jdbc:mysql://10.227.6.242:3306/test?useSSL=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC"/>-->

        <property name="url" value="jdbc:mysql://10.227.6.242:3306/plee_platform?useSSL=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC"/>
        <property name="username" value="Liang.Dongyu"/>
        <property name="password" value="faw123"/>

<!--        <property name="url" value="jdbc:mysql://localhost:3306/plee_platform_self?useSSL=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC"/>
        <property name="username" value="plee"/>
        <property name="password" value="plee123!"/>-->
        <!--下面是Hikari的-->

<!--        <property name="readOnly" value="false" />
        &lt;!&ndash; 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 &ndash;&gt;
        <property name="connectionTimeout" value="30000" />
        &lt;!&ndash; 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 &ndash;&gt;
        <property name="idleTimeout" value="600000" />
        &lt;!&ndash; 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL
            wait_timeout参数（show variables like '%timeout%';） &ndash;&gt;
        <property name="maxLifetime" value="1800000" />
        &lt;!&ndash; 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) &ndash;&gt;
        <property name="maximumPoolSize" value="60" />
        <property name="minimumIdle" value="10" />-->

        <!--Hikari结束-->

         <!--配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="5"/>
        <property name="maxActive" value="30"/>

        <!-- 配置获取连接等待超时的时间 -->
<!--
        <property name="maxWait" value="60000"/>
-->

        <!-- 配置间隔多久（1分钟）启动一次DestroyThread，对连接池内的连接才进行一次检测，单位是毫秒。
           检测时:
           1.如果连接空闲并且超过minIdle以外的连接，
           如果空闲时间超过minEvictableIdleTimeMillis设置的值则直接物理关闭。
           2.在minIdle以内的不处理。
       -->
<!--
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
-->

        <!-- 配置一个连接在池中最大空闲、不被驱逐的时间，单位是毫秒,5分钟 -->
<!--
        <property name="minEvictableIdleTimeMillis" value="300000" />
-->

        <!-- 设置从连接池获取连接时是否检查连接有效性，true时，每次都检查;false时，不检查 -->
        <!--<property name="testOnBorrow" value="true"/>-->

        <!-- 连接泄露检查，打开removeAbandoned功能 ,
        连接从连接池借出后，长时间不归还，将触发强制回连接。
        回收周期随timeBetweenEvictionRunsMillis进行，
        如果连接为从连接池借出状态，并且未执行任何sql，
        并且从借出时间起已超过removeAbandonedTimeout时间，
        则强制归还连接到连接池中。 -->

        <!--<property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeoutMillis" value="1800000"/>-->

        <!-- 关闭abanded连接时输出错误日志，这样出现连接泄露时可以通过错误日志定位忘记关闭连接的位置 -->
<!--
        <property name="logAbandoned" value="true" />
-->


        <!--配置数据源监控的filter-->
        <property name="filters" value="stat"/>

    </bean>
    <!--3. 配置sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--绑定Mybatis（也可不加，但推荐）-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--mapperLocations仅仅是sql配置文件，会被解析放入Configuration中
        configLocation可以设置其他东西，比如二级缓存、实体类别名、数据源（DataSource）等，
        可以配置多个config.xml实现多数据源配置。它会被解析为Configuration对象，这是构建SqlSessionFactory所必须的。
-->
        <property name="mapperLocations" value="classpath:dao/*.xml"/>
    </bean>
    <!--4. SqlSessionTemplate就是sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <!--因为源码中没有set方法，所以只能用构造器constructor注入sqlSessionFactory,property是不行的-->
        <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>

    <!--配置dao接口扫描包，动态的实现了dao接口可以注入到Spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--将上方的sqlSessionFactory注入-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--要扫描的dao包,在dao包下就不用写Impl实现类了-->
        <property name="basePackage" value="dao"/>
    </bean>

</beans>
